const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const courseOutlineAIModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Generate a study material for PYTHON for EXAM and level of difficulty  will be EASY with summary of course, List of Chapters along with summery  for each chapter, Topic list in each chapter in  JSON format",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: 'Okay, here\'s Python study material designed for an "easy" exam, focusing on fundamental concepts.  I\'ll present it in a structured format, with summaries and a JSON-like topic breakdown for each chapter.\n\n**Summary of Course: Introduction to Python Fundamentals**\n\nThis course provides a gentle introduction to the Python programming language. It covers the basic building blocks of Python, including data types, operators, control flow, functions, and simple data structures. The goal is to equip learners with the knowledge and skills to write simple Python programs and understand fundamental programming concepts.  No prior programming experience is assumed.  Emphasis is placed on readability, clear explanations, and practical examples.\n\n**List of Chapters**\n\n1.  Introduction to Python\n2.  Data Types and Variables\n3.  Operators\n4.  Control Flow (Conditional Statements)\n5.  Loops\n6.  Functions\n7.  Basic Data Structures: Lists and Tuples\n\n**Chapter Summaries and Topic Lists (JSON-like Format)**\n\n```json\n[\n  {\n    "chapter": 1,\n    "title": "Introduction to Python",\n    "summary": "This chapter introduces Python as a programming language, highlighting its features, advantages, and uses. It covers the basics of setting up the Python environment and writing/executing simple \'Hello, World!\' programs.",\n    "topics": [\n      {"topic": "What is Python?", "details": "High-level, interpreted language; Advantages (readability, large community, versatility); Common uses (web development, data science, scripting)"},\n      {"topic": "Setting up the Python Environment", "details": "Installing Python (using Anaconda or Python.org); Using a code editor (VS Code, IDLE, etc.)"},\n      {"topic": "Writing and Running Your First Program", "details": "The \'Hello, World!\' program; Understanding the print() function; Executing Python code"}\n    ]\n  },\n  {\n    "chapter": 2,\n    "title": "Data Types and Variables",\n    "summary": "This chapter explains fundamental data types in Python (integers, floats, strings, booleans) and how to store and manipulate data using variables.",\n    "topics": [\n      {"topic": "Data Types", "details": "Integers (int), Floating-point numbers (float), Strings (str), Booleans (bool)"},\n      {"topic": "Variables", "details": "Assigning values to variables; Variable naming conventions; Dynamic typing"},\n      {"topic": "Type Conversion", "details": "Converting between data types (e.g., int() to convert string or float to integer)"}\n    ]\n  },\n  {\n    "chapter": 3,\n    "title": "Operators",\n    "summary": "This chapter covers basic operators in Python, including arithmetic, comparison, and logical operators. It explains how to use these operators to perform calculations and comparisons.",\n    "topics": [\n      {"topic": "Arithmetic Operators", "details": "+ (addition), - (subtraction), * (multiplication), / (division), // (floor division), % (modulo), ** (exponentiation)"},\n      {"topic": "Comparison Operators", "details": "== (equal to), != (not equal to), > (greater than), < (less than), >= (greater than or equal to), <= (less than or equal to)"},\n      {"topic": "Logical Operators", "details": "and, or, not"},\n      {"topic": "Assignment Operators", "details": "=, +=, -=, *=, /="}\n    ]\n  },\n  {\n    "chapter": 4,\n    "title": "Control Flow (Conditional Statements)",\n    "summary": "This chapter introduces conditional statements (if, elif, else) to control the flow of execution based on conditions. It explains how to use these statements to make decisions in your programs.",\n    "topics": [\n      {"topic": "if Statement", "details": "Basic if statement syntax; Code blocks; Indentation"},\n      {"topic": "if-else Statement", "details": "Executing different code blocks based on a condition"},\n      {"topic": "if-elif-else Statement", "details": "Checking multiple conditions"},\n      {"topic": "Nested if Statements", "details": "if statements within if statements"}\n    ]\n  },\n  {\n    "chapter": 5,\n    "title": "Loops",\n    "summary": "This chapter covers the \'for\' and \'while\' loops for repetitive execution of code blocks. It explains how to use these loops to iterate over sequences and repeat tasks.",\n    "topics": [\n      {"topic": "while Loop", "details": "Basic while loop syntax; Condition-controlled loops; Using \'break\' and \'continue\' statements"},\n      {"topic": "for Loop", "details": "Iterating over sequences (strings, lists, tuples); Using \'range()\' function"},\n      {"topic": "Nested Loops", "details": "Loops within loops"}\n    ]\n  },\n  {\n    "chapter": 6,\n    "title": "Functions",\n    "summary": "This chapter introduces functions as reusable blocks of code. It explains how to define functions, pass arguments, and return values.",\n    "topics": [\n      {"topic": "Defining Functions", "details": "The \'def\' keyword; Function name; Parameters; Docstrings"},\n      {"topic": "Calling Functions", "details": "Passing arguments; Using function return values"},\n      {"topic": "Function Arguments", "details": "Positional arguments, Keyword arguments, Default arguments"},\n      {"topic": "Return Statement", "details": "Returning values from functions"}\n    ]\n  },\n  {\n    "chapter": 7,\n    "title": "Basic Data Structures: Lists and Tuples",\n    "summary": "This chapter introduces two fundamental data structures in Python: lists and tuples. It explains how to create, access, and manipulate lists and tuples.",\n    "topics": [\n      {"topic": "Lists", "details": "Creating lists; Accessing elements (indexing); Modifying lists (adding, removing, changing elements); List methods (append, insert, remove, pop)"},\n      {"topic": "Tuples", "details": "Creating tuples; Accessing elements (indexing); Immutability of tuples"},\n      {"topic": "List vs. Tuple", "details": "Key differences and when to use which"}\n    ]\n  }\n]\n```\n\n**Key Considerations for an "Easy" Exam:**\n\n*   **Focus on Syntax:**  Questions will likely test your understanding of basic Python syntax (how to write code correctly).\n*   **Code Comprehension:**  You\'ll likely need to read short snippets of Python code and predict what they will do.\n*   **Basic Problem-Solving:** You might be asked to write short programs (1-5 lines) to accomplish simple tasks.\n*   **No Complex Algorithms:** Don\'t expect questions requiring advanced algorithmic thinking.\n*   **Practical Examples:** The exam will likely use simple, real-world examples to illustrate concepts.\n\n**Example Exam Questions (Easy Level):**\n\n1.  **What is the output of the following code?**\n\n    ```python\n    x = 5\n    y = 2\n    print(x + y * 3)\n    ```\n\n2.  **Write a Python program that prints "Hello, World!" if the variable `age` is greater than or equal to 18.**\n\n3.  **What is the difference between a list and a tuple in Python?**\n\n4.  **Explain what the `range()` function does.**\n\n5.  **How do you define a function in Python? Give an example.**\n\n**Tips for Preparing:**\n\n*   **Practice writing code:** The best way to learn Python is to write code. Start with the examples in the study material and then try to write your own simple programs.\n*   **Use an online Python interpreter:**  Websites like repl.it or Google Colab allow you to run Python code directly in your web browser without installing anything.\n*   **Review the syntax carefully:**  Pay attention to details like indentation, capitalization, and punctuation.\n*   **Understand the output of simple programs:**  Try to predict what the output of a given code snippet will be before running it.\n*   **Focus on the fundamentals:** Make sure you have a solid understanding of the concepts covered in the study material.\n*   **Don\'t be afraid to ask for help:** If you\'re struggling with a concept, ask a friend, teacher, or online forum for help.\n\nGood luck with your exam!  This material should give you a solid foundation to succeed.\n',
        },
      ],
    },
  ],
});

export const generateNotesAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Generate exam material detail content for each chapter , Make sure to includes all topic point in the content, make sure to give content in HTML format (Do not Add HTMLK , Head, Body, title tag), The chapters:\n\n{\n        "chapter_number": 1,\n        "chapter_title": "Object-Oriented Programming (OOP) Fundamentals",\n        "chapter_summary": "This chapter introduces the core concepts of OOP: classes, objects, inheritance, polymorphism, and encapsulation. Students will learn how to model real-world entities using classes and objects and understand the advantages of OOP.",\n        "topics": [\n          {\n            "topic": "Classes and Objects",\n            "details": "Defining classes, creating objects (instances), attributes, methods, constructors (__init__)"\n          },\n          {\n            "topic": "Encapsulation",\n            "details": "Data hiding, access modifiers (private, protected, public - language specific), getters and setters"\n          },\n          {\n            "topic": "Inheritance",\n            "details": "Single inheritance, multiple inheritance (language specific considerations), method overriding, the \'super()\' function"\n          },\n          {\n            "topic": "Polymorphism",\n            "details": "Method overloading (language specific), method overriding, duck typing (in dynamically typed languages like Python)"\n          },\n          {\n            "topic": "Abstract Classes and Interfaces",\n            "details": "Defining abstract classes and abstract methods, interfaces (if the language supports them), using abstract classes to enforce a common interface"\n          }\n        ]\n      },',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```html\n<div>\n  <h2>Chapter 1: Object-Oriented Programming (OOP) Fundamentals</h2>\n  <p>This chapter introduces the core concepts of OOP: classes, objects, inheritance, polymorphism, and encapsulation. Students will learn how to model real-world entities using classes and objects and understand the advantages of OOP.</p>\n\n  <h3>Topic: Classes and Objects</h3>\n  <ul>\n    <li><b>Key Concepts:</b>\n      <ul>\n        <li>Definition of a <b>class</b> as a blueprint for creating objects.</li>\n        <li>Instantiation of a class to create <b>objects</b> (instances).</li>\n        <li>Understanding <b>attributes</b> as data associated with an object (instance variables).</li>\n        <li>Understanding <b>methods</b> as functions associated with an object that operate on its data.</li>\n        <li>Role and purpose of <b>constructors</b> (e.g., <code>__init__</code> in Python) for initializing object attributes upon creation.</li>\n      </ul>\n    </li>\n    <li><b>Possible Exam Questions:</b>\n      <ul>\n        <li>Explain the difference between a class and an object. Provide an example.</li>\n        <li>Write a class definition for a `Dog` with attributes `name` and `breed`, and a method `bark()`.</li>\n        <li>Describe the purpose of the constructor (<code>__init__</code>). Provide an example of its usage.</li>\n        <li>Given a class definition, identify the attributes and methods.</li>\n        <li>Create objects from a given class and access their attributes and methods.</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h3>Topic: Encapsulation</h3>\n  <ul>\n    <li><b>Key Concepts:</b>\n      <ul>\n        <li>Concept of <b>data hiding</b> - restricting direct access to object attributes to protect data integrity.</li>\n        <li>Understanding <b>access modifiers</b> (private, protected, public) and their purpose in controlling attribute accessibility (language-specific).</li>\n        <li>Using <b>getters</b> (accessor methods) and <b>setters</b> (mutator methods) to provide controlled access to attributes.</li>\n      </ul>\n    </li>\n    <li><b>Possible Exam Questions:</b>\n      <ul>\n        <li>Define encapsulation and explain its importance in OOP.</li>\n        <li>Explain the purpose of access modifiers (e.g., private, public). How do they contribute to encapsulation?</li>\n        <li>What are getters and setters? Why are they used instead of directly accessing attributes? Provide an example.</li>\n        <li>Identify whether a given code snippet demonstrates proper encapsulation.</li>\n        <li>Modify a class to implement encapsulation by making attributes private and providing getter/setter methods.</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h3>Topic: Inheritance</h3>\n  <ul>\n    <li><b>Key Concepts:</b>\n      <ul>\n        <li>Understanding <b>inheritance</b> as a mechanism for creating new classes (derived/child classes) based on existing classes (base/parent classes).</li>\n        <li><b>Single inheritance</b>: a class inheriting from only one parent class.</li>\n        <li><b>Multiple inheritance</b>: a class inheriting from multiple parent classes (language-specific considerations, potential complexities).</li>\n        <li><b>Method overriding</b>: a derived class providing its own implementation of a method that is already defined in its parent class.</li>\n        <li>Using the <code>super()</code> function to access methods and attributes of the parent class.</li>\n      </ul>\n    </li>\n    <li><b>Possible Exam Questions:</b>\n      <ul>\n        <li>Define inheritance and explain its benefits (code reusability, extensibility).</li>\n        <li>Explain the difference between single and multiple inheritance. What are the potential challenges of multiple inheritance?</li>\n        <li>What is method overriding? Provide an example of how it is used.</li>\n        <li>Explain the purpose of the <code>super()</code> function. Give an example of its usage.</li>\n        <li>Given a class hierarchy, identify the parent and child classes, and predict the output of a method call.</li>\n        <li>Design a class hierarchy using inheritance to model a specific scenario (e.g., different types of vehicles inheriting from a base `Vehicle` class).</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h3>Topic: Polymorphism</h3>\n  <ul>\n    <li><b>Key Concepts:</b>\n      <ul>\n        <li>Understanding <b>polymorphism</b> as the ability of an object to take on many forms.</li>\n        <li><b>Method overloading</b>: defining multiple methods in the same class with the same name but different parameters (language-specific).</li>\n        <li><b>Method overriding</b>: (revisited from Inheritance) a key aspect of polymorphism.</li>\n        <li><b>Duck typing</b>: (in dynamically typed languages like Python) - "If it walks like a duck and quacks like a duck, then it is a duck" - object\'s suitability is determined by the presence of certain methods and attributes, rather than its class type.</li>\n      </ul>\n    </li>\n    <li><b>Possible Exam Questions:</b>\n      <ul>\n        <li>Define polymorphism and explain its benefits.</li>\n        <li>Explain the difference between method overloading and method overriding. Give examples of each.</li>\n        <li>What is duck typing? How does it relate to polymorphism? Give an example.</li>\n        <li>Describe how polymorphism allows you to write more flexible and reusable code.</li>\n        <li>Given a code snippet that uses polymorphism, predict the output.</li>\n        <li>Design a system that leverages polymorphism to handle different types of objects in a uniform way.</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h3>Topic: Abstract Classes and Interfaces</h3>\n  <ul>\n    <li><b>Key Concepts:</b>\n      <ul>\n        <li>Definition of <b>abstract classes</b> and <b>abstract methods</b>.</li>\n        <li>Purpose of abstract classes: to define a common interface for a set of subclasses.</li>\n        <li>Abstract methods: methods that must be implemented by concrete (non-abstract) subclasses.</li>\n        <li><b>Interfaces</b> (if the language supports them): a completely abstract class with only abstract methods (and possibly constants).</li>\n        <li>Using abstract classes to enforce a common interface and ensure that certain methods are implemented by all subclasses.</li>\n      </ul>\n    </li>\n    <li><b>Possible Exam Questions:</b>\n      <ul>\n        <li>What is an abstract class? What is an abstract method?</li>\n        <li>Why are abstract classes used? What problem do they solve?</li>\n        <li>What is the difference between an abstract class and a concrete class?</li>\n        <li>Explain the concept of an interface. How does it relate to abstract classes?</li>\n        <li>Given an abstract class definition, identify the abstract methods.</li>\n        <li>Design an abstract class to define a common interface for a set of related classes. Provide examples of concrete classes that implement the abstract class.</li>\n        <li>Explain the difference between abstract classes and interfaces in the context of a specific language.</li>\n      </ul>\n    </li>\n  </ul>\n</div>\n```',
        },
      ],
    },
  ],
});

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
