const {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const courseOutlineAIModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {text: "Generate a study material for Python for Exam and level of difficulty will be EASY with summery of course, List of Chapters along with summery for each chapter, Topic list in each chapter, All resule in JSON format"},
      ],
    },
    {
      role: "model",
      parts: [
        {text: "```json\n{\n  \"course_title\": \"Python for Beginners: Exam Prep (Easy Level)\",\n  \"course_summary\": \"This course provides a gentle introduction to Python programming, focusing on the fundamental concepts needed for a basic understanding and exam preparation. It covers essential topics like data types, control flow, functions, and basic input/output. The goal is to build a solid foundation for further Python learning.\",\n  \"difficulty_level\": \"Easy\",\n  \"chapters\": [\n    {\n      \"chapter_number\": 1,\n      \"chapter_title\": \"Introduction to Python\",\n      \"chapter_summary\": \"This chapter introduces Python's history, features, and how to install and set up a Python environment.  It also covers the basics of writing and executing simple Python programs.\",\n      \"topics\": [\n        \"What is Python?\",\n        \"History and Features of Python\",\n        \"Installing Python (Windows, macOS, Linux)\",\n        \"Setting up a Development Environment (e.g., IDLE, VS Code)\",\n        \"Writing and Running Your First Python Program ('Hello, World!')\",\n        \"Python's interactive shell\",\n        \"Comments in Python\"\n      ]\n    },\n    {\n      \"chapter_number\": 2,\n      \"chapter_title\": \"Data Types and Variables\",\n      \"chapter_summary\": \"This chapter explains fundamental data types in Python, such as integers, floats, strings, and booleans. It also covers how to declare and use variables to store data.\",\n      \"topics\": [\n        \"Data Types: Integers (int), Floating-Point Numbers (float), Strings (str), Booleans (bool)\",\n        \"Variables: Declaration, Assignment, Naming Conventions\",\n        \"Type Conversion (e.g., int() to float(), str() to int())\",\n        \"Operators: Arithmetic (+, -, *, /, //, %), Comparison (==, !=, >, <, >=, <=), Logical (and, or, not)\",\n        \"String Operations: Concatenation, Slicing, Indexing\"\n      ]\n    },\n    {\n      \"chapter_number\": 3,\n      \"chapter_title\": \"Control Flow: Conditional Statements\",\n      \"chapter_summary\": \"This chapter covers the use of conditional statements (if, elif, else) to control the flow of execution based on certain conditions.\",\n      \"topics\": [\n        \"Conditional Statements: if, elif, else\",\n        \"Boolean Expressions\",\n        \"Nested if Statements\",\n        \"Comparison Operators in Conditional Statements\",\n        \"Truthiness and Falsiness\"\n      ]\n    },\n    {\n      \"chapter_number\": 4,\n      \"chapter_title\": \"Control Flow: Loops\",\n      \"chapter_summary\": \"This chapter explains the use of loops (for and while) to repeat a block of code multiple times.\",\n      \"topics\": [\n        \"for Loops: Iterating over sequences (strings, lists)\",\n        \"while Loops: Repeating a block of code until a condition is met\",\n        \"Loop Control Statements: break, continue\",\n        \"Range Function (range())\"\n      ]\n    },\n    {\n      \"chapter_number\": 5,\n      \"chapter_title\": \"Functions\",\n      \"chapter_summary\": \"This chapter introduces the concept of functions, how to define them, and how to call them. It also covers function parameters and return values.\",\n      \"topics\": [\n        \"Defining Functions: def keyword\",\n        \"Calling Functions\",\n        \"Function Parameters: Positional arguments\",\n        \"Return Values\",\n        \"Docstrings (Function Documentation)\"\n      ]\n    },\n    {\n      \"chapter_number\": 6,\n      \"chapter_title\": \"Basic Input and Output\",\n      \"chapter_summary\": \"This chapter covers how to take input from the user using the input() function and display output using the print() function.\",\n      \"topics\": [\n        \"Input Function: input()\",\n        \"Output Function: print()\",\n        \"String Formatting (f-strings)\",\n        \"Reading data from a user\"\n      ]\n    }\n  ]\n}\n```"},
      ],
    },
  ],
});

export const generateNotesAiModel = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: 'Generate exam material detail content for each chapter , Make sure to includes all topic point in the content, make sure to give content in HTML format (Do not Add HTMLK , Head, Body, title tag), The chapters:\n\n{\n        "chapter_number": 1,\n        "chapter_title": "Object-Oriented Programming (OOP) Fundamentals",\n        "chapter_summary": "This chapter introduces the core concepts of OOP: classes, objects, inheritance, polymorphism, and encapsulation. Students will learn how to model real-world entities using classes and objects and understand the advantages of OOP.",\n        "topics": [\n          {\n            "topic": "Classes and Objects",\n            "details": "Defining classes, creating objects (instances), attributes, methods, constructors (__init__)"\n          },\n          {\n            "topic": "Encapsulation",\n            "details": "Data hiding, access modifiers (private, protected, public - language specific), getters and setters"\n          },\n          {\n            "topic": "Inheritance",\n            "details": "Single inheritance, multiple inheritance (language specific considerations), method overriding, the \'super()\' function"\n          },\n          {\n            "topic": "Polymorphism",\n            "details": "Method overloading (language specific), method overriding, duck typing (in dynamically typed languages like Python)"\n          },\n          {\n            "topic": "Abstract Classes and Interfaces",\n            "details": "Defining abstract classes and abstract methods, interfaces (if the language supports them), using abstract classes to enforce a common interface"\n          }\n        ]\n      },',
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```html\n<div>\n  <h2>Chapter 1: Object-Oriented Programming (OOP) Fundamentals</h2>\n  <p>This chapter introduces the core concepts of OOP: classes, objects, inheritance, polymorphism, and encapsulation. Students will learn how to model real-world entities using classes and objects and understand the advantages of OOP.</p>\n\n  <h3>Topic: Classes and Objects</h3>\n  <ul>\n    <li><b>Key Concepts:</b>\n      <ul>\n        <li>Definition of a <b>class</b> as a blueprint for creating objects.</li>\n        <li>Instantiation of a class to create <b>objects</b> (instances).</li>\n        <li>Understanding <b>attributes</b> as data associated with an object (instance variables).</li>\n        <li>Understanding <b>methods</b> as functions associated with an object that operate on its data.</li>\n        <li>Role and purpose of <b>constructors</b> (e.g., <code>__init__</code> in Python) for initializing object attributes upon creation.</li>\n      </ul>\n    </li>\n    <li><b>Possible Exam Questions:</b>\n      <ul>\n        <li>Explain the difference between a class and an object. Provide an example.</li>\n        <li>Write a class definition for a `Dog` with attributes `name` and `breed`, and a method `bark()`.</li>\n        <li>Describe the purpose of the constructor (<code>__init__</code>). Provide an example of its usage.</li>\n        <li>Given a class definition, identify the attributes and methods.</li>\n        <li>Create objects from a given class and access their attributes and methods.</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h3>Topic: Encapsulation</h3>\n  <ul>\n    <li><b>Key Concepts:</b>\n      <ul>\n        <li>Concept of <b>data hiding</b> - restricting direct access to object attributes to protect data integrity.</li>\n        <li>Understanding <b>access modifiers</b> (private, protected, public) and their purpose in controlling attribute accessibility (language-specific).</li>\n        <li>Using <b>getters</b> (accessor methods) and <b>setters</b> (mutator methods) to provide controlled access to attributes.</li>\n      </ul>\n    </li>\n    <li><b>Possible Exam Questions:</b>\n      <ul>\n        <li>Define encapsulation and explain its importance in OOP.</li>\n        <li>Explain the purpose of access modifiers (e.g., private, public). How do they contribute to encapsulation?</li>\n        <li>What are getters and setters? Why are they used instead of directly accessing attributes? Provide an example.</li>\n        <li>Identify whether a given code snippet demonstrates proper encapsulation.</li>\n        <li>Modify a class to implement encapsulation by making attributes private and providing getter/setter methods.</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h3>Topic: Inheritance</h3>\n  <ul>\n    <li><b>Key Concepts:</b>\n      <ul>\n        <li>Understanding <b>inheritance</b> as a mechanism for creating new classes (derived/child classes) based on existing classes (base/parent classes).</li>\n        <li><b>Single inheritance</b>: a class inheriting from only one parent class.</li>\n        <li><b>Multiple inheritance</b>: a class inheriting from multiple parent classes (language-specific considerations, potential complexities).</li>\n        <li><b>Method overriding</b>: a derived class providing its own implementation of a method that is already defined in its parent class.</li>\n        <li>Using the <code>super()</code> function to access methods and attributes of the parent class.</li>\n      </ul>\n    </li>\n    <li><b>Possible Exam Questions:</b>\n      <ul>\n        <li>Define inheritance and explain its benefits (code reusability, extensibility).</li>\n        <li>Explain the difference between single and multiple inheritance. What are the potential challenges of multiple inheritance?</li>\n        <li>What is method overriding? Provide an example of how it is used.</li>\n        <li>Explain the purpose of the <code>super()</code> function. Give an example of its usage.</li>\n        <li>Given a class hierarchy, identify the parent and child classes, and predict the output of a method call.</li>\n        <li>Design a class hierarchy using inheritance to model a specific scenario (e.g., different types of vehicles inheriting from a base `Vehicle` class).</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h3>Topic: Polymorphism</h3>\n  <ul>\n    <li><b>Key Concepts:</b>\n      <ul>\n        <li>Understanding <b>polymorphism</b> as the ability of an object to take on many forms.</li>\n        <li><b>Method overloading</b>: defining multiple methods in the same class with the same name but different parameters (language-specific).</li>\n        <li><b>Method overriding</b>: (revisited from Inheritance) a key aspect of polymorphism.</li>\n        <li><b>Duck typing</b>: (in dynamically typed languages like Python) - "If it walks like a duck and quacks like a duck, then it is a duck" - object\'s suitability is determined by the presence of certain methods and attributes, rather than its class type.</li>\n      </ul>\n    </li>\n    <li><b>Possible Exam Questions:</b>\n      <ul>\n        <li>Define polymorphism and explain its benefits.</li>\n        <li>Explain the difference between method overloading and method overriding. Give examples of each.</li>\n        <li>What is duck typing? How does it relate to polymorphism? Give an example.</li>\n        <li>Describe how polymorphism allows you to write more flexible and reusable code.</li>\n        <li>Given a code snippet that uses polymorphism, predict the output.</li>\n        <li>Design a system that leverages polymorphism to handle different types of objects in a uniform way.</li>\n      </ul>\n    </li>\n  </ul>\n\n  <h3>Topic: Abstract Classes and Interfaces</h3>\n  <ul>\n    <li><b>Key Concepts:</b>\n      <ul>\n        <li>Definition of <b>abstract classes</b> and <b>abstract methods</b>.</li>\n        <li>Purpose of abstract classes: to define a common interface for a set of subclasses.</li>\n        <li>Abstract methods: methods that must be implemented by concrete (non-abstract) subclasses.</li>\n        <li><b>Interfaces</b> (if the language supports them): a completely abstract class with only abstract methods (and possibly constants).</li>\n        <li>Using abstract classes to enforce a common interface and ensure that certain methods are implemented by all subclasses.</li>\n      </ul>\n    </li>\n    <li><b>Possible Exam Questions:</b>\n      <ul>\n        <li>What is an abstract class? What is an abstract method?</li>\n        <li>Why are abstract classes used? What problem do they solve?</li>\n        <li>What is the difference between an abstract class and a concrete class?</li>\n        <li>Explain the concept of an interface. How does it relate to abstract classes?</li>\n        <li>Given an abstract class definition, identify the abstract methods.</li>\n        <li>Design an abstract class to define a common interface for a set of related classes. Provide examples of concrete classes that implement the abstract class.</li>\n        <li>Explain the difference between abstract classes and interfaces in the context of a specific language.</li>\n      </ul>\n    </li>\n  </ul>\n</div>\n```',
        },
      ],
    },
  ],
});

// const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
// console.log(result.response.text());
